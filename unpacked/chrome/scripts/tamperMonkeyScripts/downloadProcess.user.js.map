{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./scripts/tamperMonkeyScripts/downloadProcess.user.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","newStyle","document","createElement","innerHTML","getElementsByTagName","append","pdfIcon","classList","add","iconElement","pdfButtonText","pdfButtonProgress","getElementsByClassName","onclick","async","completedTasks","allHTML","numDone","totalTasks","length","bigPdf","PDFLib","PDFDocument","task","taskUri","dataset","href","formUri","replace","headers","Headers","taskNum","parseInt","match","console","log","fetch","method","then","response","json","myJson","jsonHTML","Message","html","files","file","blob","type","reader","FileReader","readAsArrayBuffer","onload","pdf","load","result","numPages","getPages","copyPages","Array","from","keys","forEach","page","addPage","jpgImage","embedJpg","jpgDims","scale","width","height","drawImage","x","getWidth","y","getHeight","toString","html2pdf","set","html2canvas","pagebreak","before","avoid","join","output","pdfAsString","htmlPdf","copiedPages","studentName","innerText","processName","getElementById","saveAs","Blob","save","remove","jsonHeader","header"],"mappings":"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","file":"scripts/tamperMonkeyScripts/downloadProcess.user.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 124);\n","// ==UserScript==\n// @name         AlmaScript - Download Alma Start Process as PDF\n// @namespace    https://greasyfork.org/en/users/8332-sreyemnayr\n// @version      2019.8.5.1\n// @description  Combines all the forms into a single PDF and downloads it.\n// @author       Ryan Meyers\n// @match        https://sges.getalma.com/workflows/processes/*/*/*\n// @require https://greasyfork.org/scripts/388210-html2pdf-js/code/html2pdfjs.js?version=722443\n// @require https://unpkg.com/pdf-lib@1.0.1/dist/pdf-lib.min.js\n// @require https://unpkg.com/file-saver@2.0.2/dist/FileSaver.min.js\n// @grant        none\n// ==/UserScript==\n\n\n(async function() {\n    'use strict';\n    var newStyle = document.createElement('style'); newStyle.innerHTML = \".pure-button-pdf { color: #eb6841; background: #fff; } .pdfIcon { margin-left:10px; margin-right:10px;} .lds-circle { display: inline-block; transform: translateZ(1px); } .lds-circle { display: inline-block; animation: lds-circle 2.4s cubic-bezier(0, 0.2, 0.8, 1) infinite; } @keyframes lds-circle {  0%, 100% { animation-timing-function: cubic-bezier(0.5, 0, 1, 0.5); } 0% { transform: rotateY(0deg); } 50% { transform: rotateY(1800deg); animation-timing-function: cubic-bezier(0, 0.5, 0.5, 1); } 100% { transform: rotateY(3600deg); } }\"; document.getElementsByTagName('head')[0].append(newStyle);\n\n    var pdfIcon = document.createElement('button');\n    pdfIcon.classList.add('pure-button', 'pure-button-pdf', 'pure-button-large');\n        var iconElement = document.createElement('i');\n    iconElement.classList.add('fas','fa-file-pdf','fa-1x', 'pdfIcon');\n    pdfIcon.append(iconElement);\n    var pdfButtonText = document.createElement('span');\n    pdfButtonText.innerHTML = \"Download PDF\";\n    var pdfButtonProgress = document.createElement('span');\n    pdfIcon.append(pdfButtonText);\n    pdfIcon.append(pdfButtonProgress);\n    document.getElementsByClassName(\"profile-user\")[0].append(pdfIcon);\n    pdfIcon.onclick = async function() {\n        iconElement.classList.add('lds-circle');\n        pdfButtonText.innerHTML = \"Generating...\";\n        pdfButtonProgress.innerHTML = \"0%\";\n\n\n\n    var completedTasks = document.getElementsByClassName(\"task-completed\");\n    var allHTML = [];\n    var numDone = 0;\n    var totalTasks = completedTasks.length;\n    const bigPdf = await PDFLib.PDFDocument.create();\n    for (var task of completedTasks) {\n        var taskUri = task.dataset.href;\n        var formUri = taskUri.replace(\"task-details\",\"form\");\n        let headers = new Headers({\n            \"Accept\"       : \"application/json\",\n            \"Content-Type\" : \"application/json\",\n            \"X-Requested-With\": \"XMLHttpRequest\"\n        });\n        var taskNum = parseInt(taskUri.match(/task=([0-9]+)/)[1]);\n        console.log(taskNum);\n        await fetch(formUri, {method: \"GET\", headers: headers})\n            .then(function(response) {\n            return response.json();\n        })\n            .then(function(myJson) {\n            console.log(myJson);\n            var jsonHTML = myJson.Message.html;\n            jsonHTML = jsonHTML.replace(/form-section/g,\"form-section-off\");\n            jsonHTML = jsonHTML.replace(/<ul class/g,\"<ul style=\\\"display:none;\\\" class\");\n            console.log(jsonHTML);\n            //var files = jsonHTML.match(/<a href=\"(\\/workflows\\/processes\\/.*\\/get-file\\?id=[a-zA-z0-9]*)\">/g);\n            var files = jsonHTML.match(/\\/workflows\\/processes\\/.*\\/get-file\\?id=[a-zA-z0-9]*/g);\n            if (files) {\n                totalTasks += files.length;\n                for (var file of files) {\n                    fetch(file).then(function(response) {\n\n                        return response.blob(); }\n                                     ).then(async function(blob) {\n                        console.log(blob.type);\n                        let reader = new FileReader();\n                        reader.readAsArrayBuffer(blob);\n                        reader.onload = async function() {\n\n                        //blob.arrayBuffer().then(async function(myBuffer){\n                            if (blob.type === \"application/pdf\") {\n                        const pdf = await PDFLib.PDFDocument.load(reader.result);\n                        console.log(pdf);\n                        const numPages = pdf.getPages().length;\n\n                        const copiedPages = await bigPdf.copyPages(pdf, Array.from(Array(numPages).keys()));\n                        copiedPages.forEach((page) => {\n                            bigPdf.addPage(page);\n                        });\n                            }\n                            else if (blob.type === \"image/jpeg\") {\n\n                                // Embed the JPG image bytes and PNG image bytes\n                                const jpgImage = await bigPdf.embedJpg(reader.result)\n\n                                // Get the width/height of the JPG image scaled down to 25% of its original size\n                                const jpgDims = jpgImage.scale(.5)\n\n                                // Add a blank page to the document\n                                const page = bigPdf.addPage([jpgDims.width, jpgDims.height])\n\n                                // Draw the JPG image in the center of the page\n                                page.drawImage(jpgImage, {\n                                    x: page.getWidth() / 2 - jpgDims.width / 2,\n                                    y: page.getHeight() / 2 - jpgDims.height / 2,\n                                    width: jpgDims.width,\n                                    height: jpgDims.height,\n                                });\n\n                            }\n                        //bigPdf.addPage(pdf);\n\n                        // console.log(pdf);\n\n                        //var objectURL = URL.createObjectURL(myBlob);\n                        //let reader = new FileReader();\n                        //reader.readAsDataURL(myBlob);\n                        //reader.onload = function() {\n                        //    console.log(myBlob);\n                        //allHTML += \"<embed src=\\\"\"+reader.result+\"\\\" width=\\\"850\\\" height=\\\"1100\\\" class=\\\"page-break\\\" type=\\\"application/pdf\\\">\";\n                        numDone += 1;\n                            pdfButtonProgress.innerHTML = parseInt(100 * (numDone / (totalTasks + 3) )).toString() + \"%\";\n                        if (numDone === totalTasks){\n\n                            html2pdf().set({\n                                html2canvas:  { scale: 2 },\n                                pagebreak: { before: '.page-break', avoid: ['div','h1','.form-section-offs'] }\n                            }).from(\"<div style=\\\"padding:100px;\\\">\"+allHTML.join(\" \")+\"</div>\").output('datauristring').then(async function (pdfAsString) {\n                                pdfButtonProgress.innerHTML = parseInt(100 * (numDone / (totalTasks + 2))).toString() + \"%\";\n                                const htmlPdf = await PDFLib.PDFDocument.load(pdfAsString);\n                                pdfButtonProgress.innerHTML = parseInt(100 * (numDone / (totalTasks + 1.5))).toString() + \"%\";\n                                const numPages = bigPdf.getPages().length;\n                                const copiedPages = await htmlPdf.copyPages(bigPdf, Array.from(Array(numPages).keys()));\n                                pdfButtonProgress.innerHTML = parseInt(100 * (numDone / (totalTasks + 1.2))).toString() + \"%\";\n                                copiedPages.forEach((page) => {\n                                    htmlPdf.addPage(page);\n                                });\n                                pdfButtonProgress.innerHTML = parseInt(100 * (numDone / (totalTasks + 1))).toString() + \"%\";\n                                //const pdfUrl = URL.createObjectURL(\n                                //    new Blob([await htmlPdf.save()], { type: 'application/pdf' }),\n                                //);\n                                var studentName = document.getElementsByClassName(\"fn\")[0].innerText;\n                    var processName = document.getElementById(\"page-header\").innerText;\n                    saveAs(new Blob([await htmlPdf.save()]), studentName+\" - \"+processName+\".pdf\");\n                                pdfButtonProgress.innerHTML = parseInt(100 * (numDone / totalTasks)).toString() + \"%\";\n                                iconElement.classList.remove('lds-circle');\n                                pdfButtonText.innerHTML = \"PDF Saved!\";\n                                pdfButtonProgress.innerHTML = \"\";\n                                //htmlPdf.save();\n                            });\n\n\n                            // const bigPdf = await PDFLib.PDFDocument.load(FormPdf);\n                            // bigPdf.addPage(pdf);\n\n\n\n                        }\n                        //};\n\n                        };\n\n                    });\n                }\n            }\n            console.log(files);\n            var jsonHeader = myJson.Message.header;\n            allHTML[taskNum] = \"<h1>\"+jsonHeader+\"</h1>\"+jsonHTML;\n            numDone += 1;\n            pdfButtonProgress.innerHTML = parseInt(100 * (numDone / (totalTasks + 3))).toString() + \"%\";\n\n            // <a href=\"/workflows/processes/5d0a73db7b86eb6fe20f6092/5d1a18b97b86eb0a7532e0f9/5d1a18b97b86eb39037d417d/get-file?id=5d372340a814e42a0d1872e1\">\n\n\n            if (numDone === totalTasks){\n                html2pdf().set({\n                                html2canvas:  { scale: 2 },\n                                pagebreak: { before: '.page-break', avoid: ['div','h1','.form-section-offs'] }\n                            }).from(\"<div style=\\\"padding:100px;\\\">\"+allHTML.join(\" \")+\"</div>\").output('datauristring').then(async function (pdfAsString) {\n                                pdfButtonProgress.innerHTML = parseInt(100 * (numDone / (totalTasks + 2))).toString() + \"%\";\n                                const htmlPdf = await PDFLib.PDFDocument.load(pdfAsString);\n                    pdfButtonProgress.innerHTML = parseInt(100 * (numDone / (totalTasks + 1.5))).toString() + \"%\";\n                                const numPages = bigPdf.getPages().length;\n                                const copiedPages = await htmlPdf.copyPages(bigPdf, Array.from(Array(numPages).keys()));\n                                pdfButtonProgress.innerHTML = parseInt(100 * (numDone / (totalTasks + 1.2))).toString() + \"%\";\n                                copiedPages.forEach((page) => {\n                                    htmlPdf.addPage(page);\n                                });\n                                pdfButtonProgress.innerHTML = parseInt(100 * (numDone / (totalTasks + 1))).toString() + \"%\";\n                                //const pdfUrl = URL.createObjectURL(\n                                //    new Blob([await htmlPdf.save()], { type: 'application/pdf' }),\n                                //);\n                                var studentName = document.getElementsByClassName(\"fn\")[0].innerText;\n                    var processName = document.getElementById(\"page-header\").innerText;\n                    saveAs(new Blob([await htmlPdf.save()]), studentName+\" - \"+processName+\".pdf\");\n                                pdfButtonProgress.innerHTML = parseInt(100 * (numDone / totalTasks)).toString() + \"%\";\n                                iconElement.classList.remove('lds-circle');\n                                pdfButtonText.innerHTML = \"Saved\";\n                                pdfButtonProgress.innerHTML = \"\";\n                                //htmlPdf.save();\n                            });\n                    //saveAs(await htmlPdf.save(), \"Form.pdf\");\n                                //window.open(pdfUrl, '_blank');\n                                //htmlPdf.save();\n                            // });\n                // console.log(allHTML);\n            }\n        });\n    }\n\n    };\n\n    // Your code here...\n})();"],"sourceRoot":""}