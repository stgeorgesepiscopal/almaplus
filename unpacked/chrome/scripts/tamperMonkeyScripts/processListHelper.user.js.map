{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./scripts/tamperMonkeyScripts/processListHelper.user.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","pdfjsLib","window","GlobalWorkerOptions","workerSrc","readBlobAsArrayBuffer","blob","temporaryFileReader","FileReader","Promise","resolve","reject","onerror","abort","DOMException","onload","result","readAsArrayBuffer","clearBody","body","replace","fetchAndUpdate","node","updateNode","fetch","href","then","response","text","doc","DOMParser","parseFromString","document","evaluate","XPathResult","ANY_TYPE","iterateNext","newNode","createElement","classList","add","innerHTML","textContent","trim","parentElement","children","append","fetchHealthForm","pdfIcon","iconElement","onclick","async","numFiles","filesDone","formUri","dataset","headers","Headers","Accept","method","json","myJson","jsonHTML","Message","html","files","match","file","length","console","log","type","reader","newImg","getDocument","promise","pdf","getPage","page","viewport","getViewport","canvas","context","getContext","height","width","renderContext","canvasContext","render","reason","error","src","remove","deleteProcess","deleteHref","id","split","pop","confirm","JSON","stringify","res","nodesFromXpath","xpath","nodes","push","clickAllImageButtons","getElementsByClassName","click","downloadAllPDFs","generatePDF","justHealth","onlyHealth","studentName","processName","bigPdf","PDFLib","PDFDocument","allHTML","bigFetch","innerText","getElementById","task","taskUri","taskNum","parseInt","fetchResponse","fileResponse","blobArrayBuffer","load","numPages","getPages","copyPages","Array","from","keys","forEach","addPage","jpgImage","embedJpg","jpgDims","scale","drawImage","x","getWidth","y","getHeight","embedPng","jsonHeader","header","html2pdf","set","html2canvas","pagebreak","before","avoid","join","output","pdfAsString","htmlPdf","saveAs","Blob","save","newStyle","getElementsByTagName","showFormsButton","allPDFsButton","doIncomplete","doNotStarted","doCompleted","doWithdraw"],"mappings":"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","file":"scripts/tamperMonkeyScripts/processListHelper.user.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 125);\n","// ==UserScript==\n// @name         Almascript - Alma Start Process List Helper\n// @namespace    https://greasyfork.org/en/users/8332-sreyemnayr\n// @version      2019.8.6.1\n// @description  Show what isn't done and display uploaded files.\n// @author       Ryan Meyers\n// @match        https://*.getalma.com/workflows/processes/*/review\n// @require https://greasyfork.org/scripts/388114-pdf-js/code/PDFjs.js?version=721820\n// @require https://greasyfork.org/scripts/388210-html2pdf-js/code/html2pdfjs.js?version=722443\n// @require https://unpkg.com/pdf-lib@1.0.1/dist/pdf-lib.min.js\n// @require https://unpkg.com/file-saver@2.0.2/dist/FileSaver.min.js\n// @grant unsafeWindow\n// ==/UserScript==\n\n// Loaded via <script> tag, create shortcut to access PDF.js exports.\nvar pdfjsLib = window[\"pdfjs-dist/build/pdf\"];\n\n// The workerSrc property shall be specified.\npdfjsLib.GlobalWorkerOptions.workerSrc =\n  \"//greasyfork.org/scripts/388115-pdf-js-worker/code/PDFjs%20Worker.js?version=721821\";\n\nconst readBlobAsArrayBuffer = (blob) => {\n  const temporaryFileReader = new FileReader();\n\n  return new Promise((resolve, reject) => {\n    temporaryFileReader.onerror = () => {\n      temporaryFileReader.abort();\n      reject(new DOMException(\"Problem parsing input file.\"));\n    };\n\n    temporaryFileReader.onload = () => {\n      resolve(temporaryFileReader.result);\n    };\n    temporaryFileReader.readAsArrayBuffer(blob);\n  });\n};\n\nfunction clearBody(body) {\n    body = body.replace(/src=/g,\"data-src=\");\n    body = body.replace(/<link/g, \"nolink\");\n    return body;\n}\n\nfunction fetchAndUpdate(node) {\n  const updateNode = node;\n\n  fetch(node.href)\n    .then(function(response) {\n      return response.text();\n    })\n    .then(function(body) {\n      body = clearBody(body);\n      var parser = new DOMParser();\n      var doc = parser.parseFromString(body, \"text/html\");\n      var xpath =\n        \"//li[contains(@class,'task')][not(contains(@class,'task-complete'))]\";\n      var result = document.evaluate(\n        xpath,\n        doc,\n        null,\n        XPathResult.ANY_TYPE,\n        null\n      );\n      //console.log(result);\n      var node,\n        nodes = [];\n      while ((node = result.iterateNext())) {\n        //console.log(node.textContent.trim());\n        var newNode = document.createElement(\"div\");\n        newNode.classList.add(\"pill\");\n\n        newNode.innerHTML =\n          '<i class=\"far fa-times-circle\" style=\"color:#eb6841;\"></i>' +\n          node.textContent.trim();\n\n        updateNode.parentElement.parentElement.children[4].append(newNode);\n      }\n    });\n}\n\nfunction fetchHealthForm(node) {\n  var updateNode = node;\n  var pdfIcon = document.createElement(\"div\");\n  pdfIcon.classList.add(\n    \"pure-button\",\n    \"pure-button-pdf\",\n    \"pure-button-large\",\n    \"image-icon-button\"\n  );\n  var iconElement = document.createElement(\"i\");\n  iconElement.classList.add(\"far\", \"fa-images\", \"fa-1x\", \"pdfIcon\");\n  pdfIcon.append(iconElement);\n  var studentName,\n    processName = \"\";\n\n  updateNode.parentElement.parentElement.children[0].append(pdfIcon);\n\n  pdfIcon.onclick = async function() {\n    iconElement.classList.add(\"lds-circle\");\n\n    fetch(node.href)\n      .then(function(response) {\n        return response.text();\n      })\n      .then(function(body) {\n        //console.log(body);\n        body = clearBody(body);\n        var parser = new DOMParser();\n        var doc = parser.parseFromString(body, \"text/html\");\n        var xpath = \"//li[contains(@class,'task')]\";\n        var result = document.evaluate(\n          xpath,\n          doc,\n          null,\n          XPathResult.ANY_TYPE,\n          null\n        );\n        //console.log(result);\n        var node,\n          nodes = [];\n        var numFiles = 0;\n        var filesDone = 0;\n        while ((node = result.iterateNext())) {\n          var taskUri = node.dataset.href;\n          var formUri = taskUri.replace(\"task-details\", \"form\");\n          let headers = new Headers({\n            Accept: \"application/json\",\n            \"Content-Type\": \"application/json\",\n            \"X-Requested-With\": \"XMLHttpRequest\"\n          });\n\n          fetch(formUri, { method: \"GET\", headers: headers })\n            .then(function(response) {\n              return response.json();\n            })\n            .then(function(myJson) {\n              //console.log(myJson);\n              var jsonHTML = myJson.Message.html;\n              jsonHTML = jsonHTML.replace(/form-section/g, \"form-section-off\");\n              jsonHTML = jsonHTML.replace(\n                /<ul class/g,\n                '<ul style=\"display:none;\" class'\n              );\n              //console.log(jsonHTML);\n              //var files = jsonHTML.match(/<a href=\"(\\/workflows\\/processes\\/.*\\/get-file\\?id=[a-zA-z0-9]*)\">/g);\n              var files = jsonHTML.match(\n                /\\/workflows\\/processes\\/.*\\/get-file\\?id=[a-zA-z0-9]*/g\n              );\n              if (files) {\n                numFiles += files.length;\n                iconElement.classList.add(\"lds-circle\");\n                for (var file of files) {\n                  fetch(file)\n                    .then(function(response) {\n                      return response.blob();\n                    })\n                    .then(async function(blob) {\n                      console.log(blob.type);\n                      let reader = new FileReader();\n                      reader.readAsArrayBuffer(blob);\n                      reader.onload = async function() {\n                        var newImg;\n\n                        //blob.arrayBuffer().then(async function(myBuffer){\n                        if (blob.type === \"application/pdf\") {\n                          newImg = document.createElement(\"canvas\");\n\n                          var loadingTask = pdfjsLib.getDocument(file);\n                          loadingTask.promise.then(\n                            function(pdf) {\n                              console.log(\"PDF loaded\");\n\n                              // Fetch the first page\n                              var pageNumber = 1;\n                              pdf.getPage(pageNumber).then(function(page) {\n                                console.log(\"Page loaded\");\n\n                                var scale = 0.25;\n                                var viewport = page.getViewport(scale);\n\n                                // Prepare canvas using PDF page dimensions\n                                var canvas = newImg;\n                                var context = canvas.getContext(\"2d\");\n                                canvas.height = 230;\n                                canvas.width = 160;\n\n                                // Render PDF page into canvas context\n                                var renderContext = {\n                                  canvasContext: context,\n                                  viewport: viewport\n                                };\n                                var renderTask = page.render(renderContext);\n                                renderTask.promise.then(function() {\n                                  console.log(\"Page rendered\");\n                                });\n                              });\n                            },\n                            function(reason) {\n                              // PDF loading error\n                              console.error(reason);\n                            }\n                          );\n\n                          //newImg = document.createElement('a');\n                          //newImg.href = file;\n                          //newImg.innerHTML = \"Download\";\n                          updateNode.append(newImg);\n                        } else {\n                          newImg = document.createElement(\"img\");\n                          newImg.src = file;\n                          newImg.width = 160;\n                          updateNode.append(newImg);\n                        }\n                        filesDone += 1;\n                        if (filesDone === numFiles) {\n                          iconElement.classList.remove(\"lds-circle\");\n                        }\n                      };\n                    });\n                }\n              }\n            });\n        }\n      })\n      .then(function() {});\n  };\n}\n\n\n\nfunction deleteProcess(node) {\n  var updateNode = node;\n  var pdfIcon = document.createElement(\"div\");\n  pdfIcon.classList.add(\n    \"pure-button\",\n    \"pure-button-pdf\",\n    \"pure-button-large\",\n    \"trash-icon-button\"\n  );\n  var iconElement = document.createElement(\"i\");\n  iconElement.classList.add(\"fas\", \"fa-trash\", \"fa-1x\", \"trashIcon\");\n  pdfIcon.append(iconElement);\n  var studentName,\n    processName = \"\";\n\n  updateNode.parentElement.parentElement.children[0].append(pdfIcon);\n\n  pdfIcon.onclick = async function() {\n    iconElement.classList.add(\"lds-circle\");\n\n    var deleteHref = node.href + '/delete';\n    var id = node.href.split('/').pop();\n    var confirm = \"DESTROY\";\n\n    if (window.confirm(\"Really delete? Can't undo!\")) {\n      await fetch(deleteHref, {method: 'POST',\n                headers : new Headers(),\n                body:JSON.stringify({id:id, confirm:confirm}\n                  )})\n                .then((res) => res.text()).then((text) => console.log(deleteHref));\n                iconElement.classList.remove(\"lds-circle\");\n                updateNode.parentElement.parentElement.remove();\n                }\n                else {\n                  iconElement.classList.remove(\"lds-circle\");\n                }\n\n  };\n}\n\nfunction nodesFromXpath(xpath) {\n  // var xpath = \"//tr[td[text()='Active (in progress)']]/td[2]/a\";\n  var result = document.evaluate(\n    xpath,\n    document,\n    null,\n    XPathResult.ANY_TYPE,\n    null\n  );\n  var node,\n    nodes = [];\n  while ((node = result.iterateNext())) {\n    nodes.push(node);\n  }\n  return nodes;\n\n}\n\n\nfunction doIncomplete() {\n  for (let node of nodesFromXpath(\"//tr[td[text()='Active (in progress)']]/td[2]/a\")) {\n    fetchAndUpdate(node);\n    deleteProcess(node);\n  }\n}\n\nfunction doNotStarted() {\n  for (let node of nodesFromXpath(\"//tr[td[text()='Active (not started)']]/td[2]/a\")) {\n     deleteProcess(node);\n  }\n}\n\nfunction doCompleted() {\n  for (let node of nodesFromXpath(\"//tr[td[text()='Active (complete)' or text()='Complete']]/td[2]/a\")) {\n    generatePDF(node);\n    generatePDF(node, true);\n    fetchHealthForm(node);\n  }\n}\n\nfunction doWithdraw() {\n  for (let node of nodesFromXpath(\"//tr[td[text()='Withdraw']]/td[2]/a\")) {\n    deleteProcess(node);\n  }\n}\n\nfunction clickAllImageButtons() {\n  var node;\n  for (node of document.getElementsByClassName(\"image-icon-button\")) {\n    node.click();\n  }\n}\n\nfunction downloadAllPDFs() {\n  var node;\n  for (node of document.getElementsByClassName(\"pdf-icon-button\")) {\n    node.click();\n  }\n}\n\n\nfunction generatePDF(node, justHealth = false) {\n  const onlyHealth = justHealth;\n  var updateNode = node;\n  var pdfIcon = document.createElement(\"div\");\n  var iconElement = document.createElement(\"i\");\n  if (onlyHealth) {\n    pdfIcon.classList.add(\n      \"pure-button\",\n      \"pure-button-pdf\",\n      \"pure-button-large\",\n      \"health-icon-button\"\n    );\n    iconElement.classList.add(\"fas\", \"fa-notes-medical\", \"fa-1x\", \"pdfIcon\");\n  } else {\n    pdfIcon.classList.add(\n      \"pure-button\",\n      \"pure-button-pdf\",\n      \"pure-button-large\",\n      \"pdf-icon-button\"\n    );\n    iconElement.classList.add(\"fas\", \"fa-file-pdf\", \"fa-1x\", \"pdfIcon\");\n  }\n\n  pdfIcon.append(iconElement);\n  var studentName,\n    processName = \"\";\n\n  updateNode.parentElement.parentElement.children[0].append(pdfIcon);\n\n  pdfIcon.onclick = async function() {\n    iconElement.classList.add(\"lds-circle\");\n    const bigPdf = await PDFLib.PDFDocument.create();\n    var allHTML = [];\n\n    const bigFetch = await fetch(node.href);\n    var body = await bigFetch.text();\n\n        body = clearBody(body);\n        //console.log(body);\n        var parser = new DOMParser();\n        var doc = parser.parseFromString(body, \"text/html\");\n        var xpath;\n\n        studentName = doc.getElementsByClassName(\"fn\")[0].innerText.trim();\n        if (onlyHealth) {\n          processName =\n            \"HEALTH \" + doc.getElementById(\"page-header\").innerText.trim();\n          xpath =\n            \"//li[contains(@class,'task')][div/h5[contains(text(),'Health' ) or contains(text(), 'Medi')]]\";\n        } else {\n          processName = doc.getElementById(\"page-header\").innerText.trim();\n          xpath = \"//li[contains(@class,'task')]\";\n        }\n\n        var result = document.evaluate(\n          xpath,\n          doc,\n          null,\n          XPathResult.ANY_TYPE,\n          null\n        );\n\n        var numDone = 0;\n        var task;\n        while ((task = result.iterateNext())) {\n          var taskUri = task.dataset.href;\n          var formUri = taskUri.replace(\"task-details\", \"form\");\n          let headers = new Headers({\n            Accept: \"application/json\",\n            \"Content-Type\": \"application/json\",\n            \"X-Requested-With\": \"XMLHttpRequest\"\n          });\n\n          var taskNum = parseInt(taskUri.match(/task=([0-9]+)/)[1]);\n          console.log(taskNum);\n          var fetchResponse = await fetch(formUri, { method: \"GET\", headers: headers });\n          var myJson = await fetchResponse.json();\n\n              console.log(myJson);\n              var jsonHTML = myJson.Message.html;\n              jsonHTML = jsonHTML.replace(/form-section/g, \"form-section-off\");\n              jsonHTML = jsonHTML.replace(\n                /<ul class/g,\n                '<ul style=\"display:none;\" class'\n              );\n              console.log(jsonHTML);\n              //var files = jsonHTML.match(/<a href=\"(\\/workflows\\/processes\\/.*\\/get-file\\?id=[a-zA-z0-9]*)\">/g);\n              var files = jsonHTML.match(\n                /\\/workflows\\/processes\\/.*\\/get-file\\?id=[a-zA-z0-9]*/g\n              );\n              if (files) {\n                for (var file of files) {\n                  var fileResponse = await fetch(file);\n                  var blob = await fileResponse.blob();\n\n\n                      console.log(blob.type);\n\n                      const blobArrayBuffer = await readBlobAsArrayBuffer(blob);\n\n                        //blob.arrayBuffer().then(async function(myBuffer){\n                        if (blob.type === \"application/pdf\") {\n                          const pdf = await PDFLib.PDFDocument.load(\n                            blobArrayBuffer\n                          );\n                          console.log(pdf);\n                          const numPages = pdf.getPages().length;\n\n                          const copiedPages = await bigPdf.copyPages(\n                            pdf,\n                            Array.from(Array(numPages).keys())\n                          );\n                          copiedPages.forEach(page => {\n                            bigPdf.addPage(page);\n                          });\n                        } else if (blob.type === \"image/jpeg\") {\n                          // Embed the JPG image bytes and PNG image bytes\n                          const jpgImage = await bigPdf.embedJpg(blobArrayBuffer);\n\n                          // Get the width/height of the JPG image scaled down to 25% of its original size\n                          const jpgDims = jpgImage.scale(0.5);\n\n                          // Add a blank page to the document\n                          const page = bigPdf.addPage([\n                            jpgDims.width,\n                            jpgDims.height\n                          ]);\n\n                          // Draw the JPG image in the center of the page\n                          page.drawImage(jpgImage, {\n                            x: page.getWidth() / 2 - jpgDims.width / 2,\n                            y: page.getHeight() / 2 - jpgDims.height / 2,\n                            width: jpgDims.width,\n                            height: jpgDims.height\n                          });\n                        } else if (blob.type === \"image/png\") {\n                          // Embed the JPG image bytes and PNG image bytes\n                          const jpgImage = await bigPdf.embedPng(blobArrayBuffer);\n\n                          // Get the width/height of the JPG image scaled down to 25% of its original size\n                          const jpgDims = jpgImage.scale(0.5);\n\n                          // Add a blank page to the document\n                          const page = bigPdf.addPage([\n                            jpgDims.width,\n                            jpgDims.height\n                          ]);\n\n                          // Draw the JPG image in the center of the page\n                          page.drawImage(jpgImage, {\n                            x: page.getWidth() / 2 - jpgDims.width / 2,\n                            y: page.getHeight() / 2 - jpgDims.height / 2,\n                            width: jpgDims.width,\n                            height: jpgDims.height\n                          });\n                        }\n                        //bigPdf.addPage(pdf);\n\n                        // console.log(pdf);\n\n                        //var objectURL = URL.createObjectURL(myBlob);\n                        //let reader = new FileReader();\n                        //reader.readAsDataURL(myBlob);\n                        //reader.onload = function() {\n                        //    console.log(myBlob);\n                        //allHTML += \"<embed src=\\\"\"+reader.result+\"\\\" width=\\\"850\\\" height=\\\"1100\\\" class=\\\"page-break\\\" type=\\\"application/pdf\\\">\";\n                        //numDone += 1;\n                        // pdfButtonProgress.innerHTML = parseInt(100 * (numDone / (totalTasks + 3) )).toString() + \"%\";\n\n                        //};\n\n\n                }\n              }\n              console.log(files);\n              var jsonHeader = myJson.Message.header;\n              allHTML[taskNum] = \"<h1>\" + jsonHeader + \"</h1>\" + jsonHTML;\n              // numDone += 1;\n              // pdfButtonProgress.innerHTML = parseInt(100 * (numDone / (totalTasks + 3))).toString() + \"%\";\n\n              // <a href=\"/workflows/processes/5d0a73db7b86eb6fe20f6092/5d1a18b97b86eb0a7532e0f9/5d1a18b97b86eb39037d417d/get-file?id=5d372340a814e42a0d1872e1\">\n\n        }\n\n        html2pdf()\n        .set({\n          html2canvas: { scale: 2 },\n          pagebreak: {\n            before: \".page-break\",\n            avoid: [\"div\", \"h1\", \".form-section-offs\"]\n          }\n        })\n        .from('<div style=\"padding:100px;\">' + allHTML.join(\" \") + \"</div>\")\n        .output(\"datauristring\")\n        .then(async function(pdfAsString) {\n          //pdfButtonProgress.innerHTML = parseInt(100 * (numDone / (totalTasks + 2))).toString() + \"%\";\n          const htmlPdf = await PDFLib.PDFDocument.load(pdfAsString);\n          //pdfButtonProgress.innerHTML = parseInt(100 * (numDone / (totalTasks + 1.5))).toString() + \"%\";\n          const numPages = bigPdf.getPages().length;\n          const copiedPages = await htmlPdf.copyPages(\n            bigPdf,\n            Array.from(Array(numPages).keys())\n          );\n          //pdfButtonProgress.innerHTML = parseInt(100 * (numDone / (totalTasks + 1.2))).toString() + \"%\";\n          copiedPages.forEach(page => {\n            htmlPdf.addPage(page);\n          });\n          //pdfButtonProgress.innerHTML = parseInt(100 * (numDone / (totalTasks + 1))).toString() + \"%\";\n          //const pdfUrl = URL.createObjectURL(\n          //    new Blob([await htmlPdf.save()], { type: 'application/pdf' }),\n          //);\n\n          saveAs(\n            new Blob([await htmlPdf.save()]),\n            studentName + \" - \" + processName + \".pdf\"\n          );\n          //pdfButtonProgress.innerHTML = parseInt(100 * (numDone / totalTasks)).toString() + \"%\";\n          iconElement.classList.remove(\"lds-circle\");\n          //pdfButtonText.innerHTML = \"Saved\";\n          //pdfButtonProgress.innerHTML = \"\";\n          //htmlPdf.save();\n        });\n\n      }\n\n\n\n        //saveAs(await htmlPdf.save(), \"Form.pdf\");\n        //window.open(pdfUrl, '_blank');\n        //htmlPdf.save();\n        // });\n        // console.log(allHTML);\n\n  }\n\n\n(async function() {\n  \"use strict\";\n  var newStyle = document.createElement(\"style\");\n  newStyle.innerHTML = `\n.pill {\nbackground-color: #fff;\npadding: .5em;\nborder-radius: 5px;\ndisplay: inline-block;\ncursor: default;\nmargin-top: 1em;\nfont-size: 8pt;\n}\n.pure-button-pdf { color: #eb6841; background: #fff; padding: 0.1em;}\n.pdfIcon { margin-left:2px; margin-right:2px;}\n.lds-circle { display: inline-block; transform: translateZ(1px); }\n.lds-circle { display: inline-block; animation: lds-circle 2.4s cubic-bezier(0, 0.2, 0.8, 1) infinite; }\n@keyframes lds-circle {  0%, 100% { animation-timing-function: cubic-bezier(0.5, 0, 1, 0.5); } 0% { transform: rotateY(0deg); } 50% { transform: rotateY(1800deg); animation-timing-function: cubic-bezier(0, 0.5, 0.5, 1); } 100% { transform: rotateY(3600deg); } }\n    `;\n  document.getElementsByTagName(\"head\")[0].append(newStyle);\n\n  var showFormsButton = document.createElement(\"button\");\n  showFormsButton.onclick = clickAllImageButtons;\n  showFormsButton.innerHTML =\n    '<i class=\"far fa-images\"></i> Show Thumbnails for All Uploads';\n  showFormsButton.classList.add(\"pure-button\");\n  document.getElementById(\"page-header\").append(showFormsButton);\n\n  var allPDFsButton = document.createElement(\"button\");\n  allPDFsButton.onclick = downloadAllPDFs;\n  allPDFsButton.innerHTML =\n    '<i class=\"far fa-file-pdf\"></i> Download all Completed as PDFs';\n  allPDFsButton.classList.add(\"pure-button\");\n  document.getElementById(\"page-header\").append(allPDFsButton);\n\n  doIncomplete();\n  doNotStarted();\n  doCompleted();\n  doWithdraw();\n})();\n"],"sourceRoot":""}